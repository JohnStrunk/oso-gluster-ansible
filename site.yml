# vim: set ts=2 sw=2 et :
---
########################################
# This file declares the desired configuration of the Gluster cluster(s)
#
# Server organization:
# - A Gluster cluster is contained entirely within a region.
# - Each region may have more than 1 cluster
# - Nodes within a cluster are divided into groups
# - Each group has 3 total servers, each of which is in a different AZ
# - Volumes are constructed from a group of servers (replica=3)
#
# Required tags:
# For this playbook to function properly, the ec2 instances need to have the
# following tags applied to them:
#   gluster: server
#   cluster: <cluster #>
#   group:   <group #>
# One host from each cluster should additionally have a tag:
#   manager: true
# This "manager" host will be used for peer probe


- name: Prepare Gluster TLS CA
  hosts: localhost
  become: false
  roles:
  - prepare-gluster-ca


- name: Install Gluster on servers
  hosts: tag_gluster_server
  become: true
  roles:
  - gluster-server


- name: Clean up local TLS files
  hosts: localhost
  become: false
  tasks:
  - name: Clean up local temp directory
    file:
      path: "{{ hostvars.localhost.tempdir }}"
      state: absent


- name: "Configure TSP: region=us-east-2, cluster=0"
  hosts: tag_gluster_server,&us-east-2,&tag_cluster_0,&tag_manager_true
  become: true
  tasks:
  - name: Establish TSP
    # Make sure we use Amazon's internal fqdn for the servers
    command: gluster peer probe {{ hostvars[item]['ansible_fqdn'] }}
    with_items: "{{ groups['tag_gluster_server'] |
                    intersect(groups['us-east-2']) |
                    intersect(groups['tag_cluster_0'])}}"


- import_playbook: gluster-volume.yml
  vars:
    volume_name: supervol0
    size: 1T
    device: /dev/xvdb
    server_group: "{{ groups['tag_gluster_server'] |
                    intersect(groups['us-east-2']) |
                    intersect(groups['tag_cluster_0']) |
                    intersect(groups['tag_group_0']) }}"


# Need to add managed reboot sequence here
# Reboot by AZ, ensuring hosts are up & healed before each reboot
# Conditions:
#   when: rhgs_updated.changed == true

